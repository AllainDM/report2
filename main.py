
import os
import shutil
import asyncio
import logging
from datetime import datetime, timedelta

import xlwt
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode

import crud
import config
from report_handler import ReportCalc
from report_handler import ReportWeek
from report_handler import ReportParser
from report_handler import MastersStatistic
from report_handler import OneMasterStatistic
from report_handler import SearchReportsInFolder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_API_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_API_TOKEN)
dp = Dispatcher()

if not os.path.exists(f"files"):
    os.makedirs(f"files")
if not os.path.exists(f"files/–¢–û –ó–∞–ø–∞–¥"):
    os.makedirs(f"files/–¢–û –ó–∞–ø–∞–¥")
if not os.path.exists(f"files/–¢–û –°–µ–≤–µ—Ä"):
    os.makedirs(f"files/–¢–û –°–µ–≤–µ—Ä")
if not os.path.exists(f"files/–¢–û –Æ–≥"):
    os.makedirs(f"files/–¢–û –Æ–≥")
if not os.path.exists(f"files/–¢–û –í–æ—Å—Ç–æ–∫"):
    os.makedirs(f"files/–¢–û –í–æ—Å—Ç–æ–∫")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # –£–∑–Ω–∞–µ–º –∏–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    user_id = message.from_user.id
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    if user_id in config.USERS:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç...")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º –æ–¥–Ω–æ–≥–æ –¢–û –∑–∞ –º–µ—Å—è—Ü. !!! –í–Ω–∏–º–∞–Ω–∏–µ, —ç—Ç–æ –Ω–µ –∞–Ω–∞–ª–æ–≥ –æ—Ç—á–µ—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é.
@dp.message(Command("month", "–º–µ—Å—è—Ü"))
async def month_stats(message: types.Message):
    # –£–∑–Ω–∞–µ–º –∏–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    user_id = message.from_user.id
    # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–¥–º–∏–Ω
    if user_id in config.USERS:
        # –ü–æ–ª—É—á–∏–º –¢–û –ø–æ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        t_o = await get_to(message)
        if t_o:  # –¢–û –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –Ω–æ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ—à–∏–±–æ–∫
            await message.answer(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü –¥–ª—è {t_o}")
            month = await get_month_dates()  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∞—Ç –≤ –º–µ—Å—è—Ü–µ
            statistic = MastersStatistic(message=message, t_o=t_o, month=month)
            await statistic.process_report()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–∞—Å—Ç–µ—Ä—É –∑–∞ –º–µ—Å—è—Ü.
@dp.message(Command("master", "–º–∞—Å—Ç–µ—Ä"))
async def month_stats(message: types.Message):
    # –ü–æ–ª—É—á–∏–º –¢–û –ø–æ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    t_o = await get_to(message)
    if t_o:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —á–∞—Ç–æ–≤.
        args = message.text.split(maxsplit=1)  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ 2 —á–∞—Å—Ç–∏
        if len(args) > 1:
            one_master = args[1].title()
            await message.answer(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü –¥–ª—è {one_master}")
            month = await get_month_dates()  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∞—Ç –≤ –º–µ—Å—è—Ü–µ
            statistic = OneMasterStatistic(message=message, one_master=one_master, month=month)
            await statistic.process_report()

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ —Å –æ—Ç—á–µ—Ç–∞–º–∏ –∑–∞ –¥–µ–Ω—å
@dp.message(Command("del"))
async def del_folder(message: types.Message):
    # –£–∑–Ω–∞–µ–º –∏–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∏–º –¢–û –ø–æ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    t_o = await get_to(message)
    if t_o and user_id in config.USERS:  # –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ "–∞–¥–º–∏–Ω–∞–º"
        command = message.text.split(maxsplit=1)
        command = command[1]
        if len(command) == 18:
            await message.answer(f"–•–æ—Ç–∏–º —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É /{t_o}/{command}")
            try:
                shutil.rmtree(f"files/{t_o}/{command}")
                logger.info(f"/{t_o}/{command} —É–¥–∞–ª–µ–Ω")
                await message.answer(f"–ü–∞–ø–∫–∞ /{t_o}/{command} —É–¥–∞–ª–µ–Ω–∞")
            except OSError as error:
                logger.info("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞1.")
                await message.answer(f"–ü–∞–ø–∫–∞ /{t_o}/{command} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!!!")
        else:
            await message.answer(f"–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ –≤–µ—Ä–Ω–æ")
    # else:
    #     await message.answer("–ù–µ–∞")

# –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –æ—Ç—á–µ—Ç–∞ –º–∞—Å—Ç–µ—Ä–∞
@dp.message(Command("del_file"))
async def del_file(message: types.Message):
    # –ü–æ–ª—É—á–∏–º –∏–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–∞–≤–Ω–∏–º —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥–∞
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∏–º –¢–û –ø–æ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    t_o = await get_to(message)
    if t_o and user_id in config.USERS:  # –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ "–∞–¥–º–∏–Ω–∞–º"
        list_masters = SearchReportsInFolder(message=message, t_o=t_o)
        await list_masters.process_report()
        print(f"list_masters.list_masters {list_masters.list_masters}")
        if len(list_masters.list_masters) > 0:
            # –î–∞—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞–ø–æ–∫
            date_now = datetime.now()
            date_ago = date_now - timedelta(hours=15)  # - hours –∑–¥–µ—Å—å –º—ã –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω—É—Å 15 —á–∞—Å–æ–≤
            logger.info(f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {date_now}")
            month_year = date_ago.strftime("%m.%Y")
            full_date = date_ago.strftime("%d.%m.%Y")
            # –§–∞–º–∏–ª–∏—è –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
            command = message.text.split(maxsplit=1)
            master = command[1]

            await message.answer(f"–•–æ—Ç–∏–º —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª /{t_o}/{month_year}/{full_date}/{master}")
            try:
                os.remove(f"files/{t_o}/{month_year}/{full_date}/{master}.json")
                await message.answer(f"–§–∞–π–ª /{t_o}/{month_year}/{full_date}/{master} —É–¥–∞–ª–µ–Ω")
            except OSError as error:
                await message.answer(f"–§–∞–π–ª /{t_o}/{month_year}/{full_date}/{master} –Ω–µ –Ω–∞–π–¥–µ–Ω!!!")
            if crud.delete_master_day_report(full_date=full_date, master=master, t_o=t_o):
                await message.answer(f"–ó–∞–ø–∏—Å—å –≤ –ë–î –º–∞—Å—Ç–µ—Ä–∞ {master} –∑–∞ {full_date} —É–¥–∞–ª–µ–Ω–∞")
            else:
                await message.answer(f"–ó–∞–ø–∏—Å—å –≤ –ë–î –º–∞—Å—Ç–µ—Ä–∞ {master} –∑–∞ {full_date} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!!!")
            # –í—ã–≤–µ–¥–µ–º –∏–º–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —Å–≤–µ—Ä–∫–∏.
            # –û–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ.
            list_masters = SearchReportsInFolder(message=message, t_o=t_o)
            await list_masters.process_report()
            rep_masters = "–û—Ç—á–µ—Ç—ã –≤ –ø–∞–ø–∫–µ: \n"
            for master in list_masters.list_masters:
                rep_masters += f'{master} \n'
            await message.answer(rep_masters)
        else:
            await message.answer(f"–§–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω, —É–∫–∞–∑–∞–Ω –Ω–µ –≤–µ—Ä–Ω–æ –∏–ª–∏ –ø–∞–ø–∫–∞ –ø—É—Å—Ç–∞.")
    else:
        await message.answer("–ù–µ–∞")

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π. –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç—á–µ—Ç–æ–≤.
@dp.message()
async def echo_mess(message: types.Message):
    user_id = message.from_user.id  # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–∞—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º.
    # –ü–æ–ª—É—á–∏–º –¢–û –ø–æ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    t_o = await get_to(message)
    if t_o:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —á–∞—Ç–æ–≤.
        # –ü–µ—Ä–µ—Å—á–µ—Ç –¥–∞—Ç—ã –ø–æ–¥ –∑–∞–ø—Ä–æ—Å.
        # TODO –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞—Ç—ã. –£–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.
        date_now = datetime.now()
        logger.info(f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {date_now}")
        date_ago = date_now - timedelta(hours=config.HOUR)  # –∑–¥–µ—Å—å –º—ã –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω—É—Å 15 —á–∞—Å–æ–≤
        logger.info(f"–ù–æ–≤–∞—è –¥–∞—Ç–∞: {date_ago}")
        date_now_full = date_ago.strftime("%d.%m.%Y")
        date_month_year = date_ago.strftime("%m.%Y")

        # –î–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ª–æ–≤–∞ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        text_parts = message.text.lower().split()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥.
        # –ó–∞–ø—Ä–æ—Å –≤—ã–ø–∏—Å–æ–∫ –∏–∑ –æ—Ç—á–µ—Ç–æ–≤ —Å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏
        if message.text.lower() == "–ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã–µ":
            ...

        # –ó–∞–ø—Ä–æ—Å –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.
        elif message.text.lower() == "–Ω–µ–¥–µ–ª—è":
            # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–¥–º–∏–Ω
            if user_id in config.USERS:
                week = await get_last_full_week()  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∞—Ç –≤ –Ω–µ–¥–µ–ª–µ(–¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ –ø–∞–ø–æ–∫)
                report = ReportWeek(message=message, t_o=t_o, week=week, date_month_year=date_month_year)
                await report.process_report()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º –∑–∞ –º–µ—Å—è—Ü. !!! –í–Ω–∏–º–∞–Ω–∏–µ, —ç—Ç–æ –Ω–µ –∞–Ω–∞–ª–æ–≥ –æ—Ç—á–µ—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é.
        elif message.text.lower() == "–º–µ—Å—è—Ü":
            # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–¥–º–∏–Ω
            if user_id in config.USERS:
                month = await get_month_dates()  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∞—Ç –≤ –º–µ—Å—è—Ü–µ(–¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ –ø–∞–ø–æ–∫)
                statistic = MastersStatistic(message=message, t_o=t_o, month=month)
                await statistic.process_report()

        # –ó–∞–ø—Ä–æ—Å –æ—Ç—á–µ—Ç–∞, –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        # elif message.text.isdigit() and 1 <= int(message.text) <= config.MAX_REPORT_DAYS_AGO:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π –∏ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        elif text_parts and text_parts[0].isdigit() and len(text_parts) <= 2:
            days_str = text_parts[0]
            if 1 <= int(days_str) <= config.MAX_REPORT_DAYS_AGO:
                days = int(days_str)
                # –í—Ç–æ—Ä—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –¢–û
                if len(text_parts) == 2:
                    to_from_msg = text_parts[1]
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤ –∫–æ–Ω—Ñ–∏–≥–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¢–û
                    if to_from_msg in config.LIST_T_O_COMMAND:
                        t_o = config.DICT_T_O[to_from_msg] # –í–æ–∑—å–º–µ–º –≥–æ—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞.
                    else:  # –ï—Å–ª–∏ –¥–≤–∞ —Å–ª–æ–≤–∞, –Ω–æ –≤—Ç–æ—Ä–æ–µ –Ω–µ –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –¢–û, —Ç–æ –≤—ã—Ö–æ–¥–∏–º
                        return
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –º–µ–Ω—è–ª–∏ –¢–û –∏–ª–∏ –Ω–µ—Ç
                # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–¥–º–∏–Ω
                if user_id in config.USERS:
                    # –ü–æ–ø—Ä–∞–≤–∏–º –¥–∞—Ç—É –ø–æ–¥ –∑–∞–ø—Ä–æ—Å
                    # days_to_subtract = int(message.text) - 1
                    days_to_subtract = days - 1
                    date_ago = date_ago - timedelta(days=days_to_subtract)
                    logger.info(f"–ù–æ–≤–∞—è –¥–∞—Ç–∞: {date_ago}")
                    date_now_full = date_ago.strftime("%d.%m.%Y")   # –î–∞—Ç–∞ –¥–ª—è —Ñ–∞–π–ª–∞
                    date_month_year = date_ago.strftime("%m.%Y")    # –î–∞—Ç–∞ –¥–ª—è –ø–∞–ø–∫–∏ –º–µ—Å—è—Ü–∞
                    # –î–ª—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –¥–µ–Ω—å –æ–¥–Ω–∞ –ø–∞–ø–∫–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
                    report_folders = [date_now_full]
                    for report_folder in report_folders:
                        await message.answer(f"–ì–æ—Ç–æ–≤–∏–º –æ—Ç—á—ë—Ç –∑–∞ {report_folder}")
                        if os.path.exists(f"files/{t_o}/{date_month_year}/{report_folder}"):
                            files = os.listdir(f"files/{t_o}/{date_month_year}/{report_folder}")
                            await message.answer(f"–ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª(–æ–≤).")
                            reports = ReportCalc(message=message, t_o=t_o, files=files,
                                                 date_month_year=date_month_year, report_folder=report_folder)
                            print(message.chat.id)
                            await reports.process_report()
                        else:
                            await message.answer(f"–ü–∞–ø–∫–∞ {report_folder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                else:
                    await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã")
                    await message.answer(f"user_id {user_id}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞, –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –º–∞—Å—Ç–µ—Ä–æ–≤.
        else:
            try:
                report = ReportParser(message, t_o, date_now_full, date_month_year)
                await report.process_report()
                # –í—ã–≤–µ–¥–µ–º –∏–º–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —Å–≤–µ—Ä–∫–∏.
                list_masters = SearchReportsInFolder(message=message, t_o=t_o)
                await list_masters.process_report()
                rep_masters = "–û—Ç—á–µ—Ç—ã –≤ –ø–∞–ø–∫–µ: \n"
                for master in list_masters.list_masters:
                    # master = master.replace('—Ä', '–ª')
                    rep_masters += f'{master} \n'
                await message.answer(rep_masters)
            except IndexError:
                logger.info("–¢—É—Ç –≤–∏–¥–∏–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–Ω–æ—Å—è—â–µ–µ—Å—è –∫ –æ—Ç—á–µ—Ç—É.")
                logger.info(f"chat.id: {message.chat.id}")
    else:
        user_id = message.from_user.id
        group_id = message.chat.id
        await message.answer(f"–¢–û –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ. \nuser_id: {user_id} \ngroup_id: {group_id}")

# –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∞—Ç –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
async def get_last_full_week():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = datetime.now()
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫=0, –í—Ç–æ—Ä–Ω–∏–∫=1, ..., –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=6)
    today_weekday = today.weekday()
    print(f"today_weekday {today_weekday}")
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—à–ª–æ–º—É –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫—É
    days_to_subtract = today_weekday + 7
    print(f"days_to_subtract {days_to_subtract}")
    # –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É –ø—Ä–æ—à–ª–æ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
    last_monday = today - timedelta(days=days_to_subtract)
    print(f"last_monday {last_monday}")
    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∏–∑ 7 –¥–∞—Ç, –Ω–∞—á–∏–Ω–∞—è —Å –ø—Ä–æ—à–ª–æ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
    dates = []
    for i in range(7):
        current_date = last_monday + timedelta(days=i)
        dates.append(current_date.strftime('%d.%m.%Y'))

    print(f"dates {dates}")
    return dates

# –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∞—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤ –∑–∞ –º–µ—Å—è—Ü
async def get_month_dates():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = datetime.now().date()
    # –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—è—Ü–∞ –≤—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –¥–Ω–µ–π –Ω–∞–∑–∞–¥.
    target_date = today - timedelta(days=config.LAST_MONTH_DAYS_AGO)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Ü–µ–ª–µ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞
    first_day_of_month = target_date.replace(day=1)
    dates = []
    current_date = first_day_of_month

    # –¶–∏–∫–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –º–µ–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π
    while current_date < today:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ü–µ–ª–µ–≤–æ–º—É –º–µ—Å—è—Ü—É
        if current_date.month == target_date.month:
            dates.append(current_date.strftime('%d.%m.%Y'))
        current_date += timedelta(days=1)
    print(f"dates {dates}")
    return dates

# –û–ø—Ä–µ–¥–µ–ª–∏–º –¢–û –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –≥—Ä—É–ø–ø–µ
async def get_to(message):
    # –ü–æ–ª—É—á–∏–º –∏–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–∞–≤–Ω–∏–º —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥–∞
    user_id = message.from_user.id
    group_id = message.chat.id
    group_id *= -1
    t_o = False
    if user_id in config.USERS or group_id in config.GROUPS:
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≥—Ä—É–ø–ø—ã –ø–æ—Ç–æ–º —é–∑–µ—Ä—ã? == –¥–∞, –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥—Ä—É–≥–∏–º–∏ –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞–º–∏
        if group_id == config.GROUP_ID_WEST:
            t_o = "–¢–û –ó–∞–ø–∞–¥"
        elif group_id == config.GROUP_ID_NORTH:
            t_o = "–¢–û –°–µ–≤–µ—Ä"
        elif group_id == config.GROUP_ID_SOUTH:
            t_o = "–¢–û –Æ–≥"
        elif group_id == config.GROUP_ID_EAST:
            t_o = "–¢–û –í–æ—Å—Ç–æ–∫"
        elif user_id in config.USERS_IN_WEST:
            t_o = "–¢–û –ó–∞–ø–∞–¥"
        elif user_id in config.USERS_IN_NORTH:
            t_o = "–¢–û –°–µ–≤–µ—Ä"
        elif user_id in config.USERS_IN_SOUTH:
            t_o = "–¢–û –Æ–≥"
        elif user_id in config.USERS_IN_EAST:
            t_o = "–¢–û –í–æ—Å—Ç–æ–∫"
    return t_o

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    await bot.delete_webhook(drop_pending_updates=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
